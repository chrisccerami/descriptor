diff --git a/src/lib.rs b/src/lib.rs
index 0a3abf8..0e2ac30 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,6 +1,7 @@
-#![feature(catch_panic)]
+#![feature(catch_panic, fnbox)]
 #[macro_use]
 extern crate lazy_static;
+use std::boxed::FnBox;
 use std::string::ToString;
 use std::thread::{JoinHandle, spawn, catch_panic};
 use std::sync::*;
@@ -10,7 +11,7 @@ use std::fmt;
 
 pub struct ExampleGroup {
     description: String,
-    examples: Vec<Box<FnOnce(&Mutex<WorldState>) -> Result<(), Box<Any + Send>> + Send + 'static>>,
+    examples: Vec<Box<FnBox(Arc<Mutex<WorldState>>) -> Result<(), Box<Any + Send>> + Send + 'static>>,
     running_examples: Vec<JoinHandle<Result<(), Box<Any + Send>>>>,
     state: Arc<Mutex<WorldState>>,
 }
@@ -68,11 +69,8 @@ impl Reporter {
 
 impl ExampleGroup {
     pub fn it<F>(&mut self, description: &str, example_definition_block: F) where F: Fn() + Send + 'static {
-        let state: Arc<Mutex<WorldState>> = self.state.clone();
-        self.examples.push(Box::new(move |state: &Mutex<WorldState>| -> Result<(), Box<Any + Send>> {
-            let result = catch_panic(move || {
-                example_definition_block();
-            });
+        self.examples.push(Box::new(move |state: Arc<Mutex<WorldState>>| {
+            let result = catch_panic(example_definition_block);
 
             if result.is_err() {
                 state.lock().unwrap().reporter.example_failed();
@@ -86,15 +84,15 @@ impl ExampleGroup {
 
     fn run(mut self, block: Box<Fn(&mut ExampleGroup) + Send + 'static>) -> bool {
         block(&mut self);
-
-        let running_examples = self.examples.iter().map(|example| {
-            use std::ops::Deref;
-            spawn(move || { example(self.state.clone().deref()) })
+        let state = self.state;
+        let running_examples = self.examples.into_iter().map(|example| {
+            let state = state.clone();
+            spawn(move || example(state))
         });
 
         let mut failed = false;
 
-        let results: Vec<_> = running_examples.into_iter().map(|jh| {
+        let results: Vec<_> = running_examples.map(|jh| {
             jh.join()
         }).collect();
 
