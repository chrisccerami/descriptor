#[macro_use]
extern crate lazy_static;

use std::mem;
use std::sync::*;
use std::vec::Vec;

struct World {
    example_groups: Vec<ExampleGroup>,
    current_example_group: Option<ExampleGroup>,
}

lazy_static! {
    static ref DESCRIPTOR_WORLD: Arc<Mutex<World>> = Arc::new(Mutex::new(
        World {
            example_groups: Vec::new(),
            current_example_group: None,
        }
    ));
}

impl World {
    fn build_example_group<F>(&mut self, description: &str, block: F) where F: Fn() -> () {
        let group = ExampleGroup::new(description);
        let group = self.evaluate_example_group(group, block);
        self.push_example_group(group);
    }

    fn evaluate_example_group<F>(&mut self, example_group: ExampleGroup, block: F) -> ExampleGroup where F: Fn() {
        self.current_example_group = Some(example_group);
        block();
        let mut example_group: Option<ExampleGroup> = None;
        mem::swap(&mut example_group, &mut self.current_example_group);
        example_group.unwrap()
    }

    fn push_example_group(&mut self, example_group: ExampleGroup) {
        self.example_groups.push(example_group);
    }
}

struct Example {
    description: String,
    block: Box<Fn() + Send>,
}


struct ExampleGroup {
    description: String,
    examples: Vec<Example>,
}

impl ExampleGroup {
    fn new(description: &str) -> ExampleGroup {
        ExampleGroup { description: description.into(), examples: Vec::new() }
    }

    fn build_example<F>(&mut self, description: &str, example_block: F) where F: Fn() + Send + 'static {
        let example = Example { description: description.into(), block: Box::new(example_block) };
        self.examples.push(example);
    }
}

fn with_world<F>(blk: F) where F: FnOnce(&mut World) -> () {
    let c = DESCRIPTOR_WORLD.clone();
    let mut guard = c.lock().unwrap();
    blk(&mut guard);
}

pub fn describe<F>(description: &str, group_block: F) where F: Fn() -> () {
    with_world(|world: &mut World| {
        world.build_example_group(description, group_block);
    });
}

pub fn it<F>(description: &str, example_block: F) where F: Fn() + Send + 'static {
    with_world(|world: &mut World| {
        let eg = world.current_example_group.as_mut().unwrap();
        eg.build_example(description, example_block);
    });
}

pub fn descriptor_main() {
    with_world(|world: &mut World| {
        for example_group in world.example_groups.iter() {
            for example in example_group.examples.iter() {
                (example.block)();
            }
        }
    });
}
